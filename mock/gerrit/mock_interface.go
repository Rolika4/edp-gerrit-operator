// Code generated by mockery v2.9.4. DO NOT EDIT.

package mock

import (
	clientgerrit "github.com/epam/edp-gerrit-operator/v2/pkg/client/gerrit"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/epam/edp-gerrit-operator/v2/pkg/apis/v2/v1alpha1"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// Configure provides a mock function with given fields: instance
func (_m *Interface) Configure(instance *v1alpha1.Gerrit) (*v1alpha1.Gerrit, bool, error) {
	ret := _m.Called(instance)

	var r0 *v1alpha1.Gerrit
	if rf, ok := ret.Get(0).(func(*v1alpha1.Gerrit) *v1alpha1.Gerrit); ok {
		r0 = rf(instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Gerrit)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*v1alpha1.Gerrit) bool); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*v1alpha1.Gerrit) error); ok {
		r2 = rf(instance)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExposeConfiguration provides a mock function with given fields: instance
func (_m *Interface) ExposeConfiguration(instance *v1alpha1.Gerrit) (*v1alpha1.Gerrit, error) {
	ret := _m.Called(instance)

	var r0 *v1alpha1.Gerrit
	if rf, ok := ret.Get(0).(func(*v1alpha1.Gerrit) *v1alpha1.Gerrit); ok {
		r0 = rf(instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Gerrit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Gerrit) error); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGerritSSHUrl provides a mock function with given fields: instance
func (_m *Interface) GetGerritSSHUrl(instance *v1alpha1.Gerrit) (string, error) {
	ret := _m.Called(instance)

	var r0 string
	if rf, ok := ret.Get(0).(func(*v1alpha1.Gerrit) string); ok {
		r0 = rf(instance)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Gerrit) error); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestClient provides a mock function with given fields: gerritInstance
func (_m *Interface) GetRestClient(gerritInstance *v1alpha1.Gerrit) (clientgerrit.ClientInterface, error) {
	ret := _m.Called(gerritInstance)

	var r0 clientgerrit.ClientInterface
	if rf, ok := ret.Get(0).(func(*v1alpha1.Gerrit) clientgerrit.ClientInterface); ok {
		r0 = rf(gerritInstance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientgerrit.ClientInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Gerrit) error); ok {
		r1 = rf(gerritInstance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServicePort provides a mock function with given fields: instance
func (_m *Interface) GetServicePort(instance *v1alpha1.Gerrit) (int32, error) {
	ret := _m.Called(instance)

	var r0 int32
	if rf, ok := ret.Get(0).(func(*v1alpha1.Gerrit) int32); ok {
		r0 = rf(instance)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Gerrit) error); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Integrate provides a mock function with given fields: instance
func (_m *Interface) Integrate(instance *v1alpha1.Gerrit) (*v1alpha1.Gerrit, error) {
	ret := _m.Called(instance)

	var r0 *v1alpha1.Gerrit
	if rf, ok := ret.Get(0).(func(*v1alpha1.Gerrit) *v1alpha1.Gerrit); ok {
		r0 = rf(instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Gerrit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Gerrit) error); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDeploymentReady provides a mock function with given fields: instance
func (_m *Interface) IsDeploymentReady(instance *v1alpha1.Gerrit) (bool, error) {
	ret := _m.Called(instance)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1alpha1.Gerrit) bool); ok {
		r0 = rf(instance)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Gerrit) error); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

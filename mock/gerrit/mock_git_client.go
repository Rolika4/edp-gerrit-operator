// Code generated by mockery v2.9.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// GitClient is an autogenerated mock type for the GitClient type
type GitClient struct {
	mock.Mock
}

// Clone provides a mock function with given fields: projectName
func (_m *GitClient) Clone(projectName string) (string, error) {
	ret := _m.Called(projectName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(projectName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(projectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateChangeID provides a mock function with given fields:
func (_m *GitClient) GenerateChangeID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Merge provides a mock function with given fields: projectName, sourceBranch, targetBranch, options
func (_m *GitClient) Merge(projectName string, sourceBranch string, targetBranch string, options ...string) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, projectName, sourceBranch, targetBranch)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, ...string) error); ok {
		r0 = rf(projectName, sourceBranch, targetBranch, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Push provides a mock function with given fields: projectName, remote, refSpecs
func (_m *GitClient) Push(projectName string, remote string, refSpecs ...string) (string, error) {
	_va := make([]interface{}, len(refSpecs))
	for _i := range refSpecs {
		_va[_i] = refSpecs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, projectName, remote)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, ...string) string); ok {
		r0 = rf(projectName, remote, refSpecs...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...string) error); ok {
		r1 = rf(projectName, remote, refSpecs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetProjectUser provides a mock function with given fields: projectName, name, email
func (_m *GitClient) SetProjectUser(projectName string, name string, email string) error {
	ret := _m.Called(projectName, name, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(projectName, name, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code generated by mockery v2.9.4. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"
	cryptossh "golang.org/x/crypto/ssh"

	ssh "github.com/epam/edp-gerrit-operator/v2/pkg/client/ssh"
)

// SSHClientInterface is an autogenerated mock type for the SSHClientInterface type
type SSHClientInterface struct {
	mock.Mock
}

// RunCommand provides a mock function with given fields: cmd
func (_m *SSHClientInterface) RunCommand(cmd *ssh.SSHCommand) ([]byte, error) {
	ret := _m.Called(cmd)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*ssh.SSHCommand) []byte); ok {
		r0 = rf(cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ssh.SSHCommand) error); ok {
		r1 = rf(cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newSession provides a mock function with given fields:
func (_m *SSHClientInterface) NewSession() (*cryptossh.Session, *cryptossh.Client, error) {
	ret := _m.Called()

	var r0 *cryptossh.Session
	if rf, ok := ret.Get(0).(func() *cryptossh.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cryptossh.Session)
		}
	}

	var r1 *cryptossh.Client
	if rf, ok := ret.Get(1).(func() *cryptossh.Client); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cryptossh.Client)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Code generated by mockery v2.9.4. DO NOT EDIT.

package mock

import (
	gerrit "github.com/epam/edp-gerrit-operator/v2/pkg/client/gerrit"
	mock "github.com/stretchr/testify/mock"

	resty "gopkg.in/resty.v1"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// AddAccessRights provides a mock function with given fields: projectName, permissions
func (_m *ClientInterface) AddAccessRights(projectName string, permissions []gerrit.AccessInfo) error {
	ret := _m.Called(projectName, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []gerrit.AccessInfo) error); ok {
		r0 = rf(projectName, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserToGroup provides a mock function with given fields: groupName, username
func (_m *ClientInterface) AddUserToGroup(groupName string, username string) error {
	ret := _m.Called(groupName, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(groupName, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGroup provides a mock function with given fields: name, description, visibleToAll
func (_m *ClientInterface) CreateGroup(name string, description string, visibleToAll bool) (*gerrit.Group, error) {
	ret := _m.Called(name, description, visibleToAll)

	var r0 *gerrit.Group
	if rf, ok := ret.Get(0).(func(string, string, bool) *gerrit.Group); ok {
		r0 = rf(name, description, visibleToAll)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gerrit.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(name, description, visibleToAll)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: prj
func (_m *ClientInterface) CreateProject(prj *gerrit.Project) error {
	ret := _m.Called(prj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gerrit.Project) error); ok {
		r0 = rf(prj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccessRights provides a mock function with given fields: projectName, permissions
func (_m *ClientInterface) DeleteAccessRights(projectName string, permissions []gerrit.AccessInfo) error {
	ret := _m.Called(projectName, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []gerrit.AccessInfo) error); ok {
		r0 = rf(projectName, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProject provides a mock function with given fields: name
func (_m *ClientInterface) DeleteProject(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserFromGroup provides a mock function with given fields: groupName, username
func (_m *ClientInterface) DeleteUserFromGroup(groupName string, username string) error {
	ret := _m.Called(groupName, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(groupName, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProject provides a mock function with given fields: name
func (_m *ClientInterface) GetProject(name string) (*gerrit.Project, error) {
	ret := _m.Called(name)

	var r0 *gerrit.Project
	if rf, ok := ret.Get(0).(func(string) *gerrit.Project); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gerrit.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResty provides a mock function with given fields:
func (_m *ClientInterface) GetResty() *resty.Client {
	ret := _m.Called()

	var r0 *resty.Client
	if rf, ok := ret.Get(0).(func() *resty.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Client)
		}
	}

	return r0
}

// ListProjectBranches provides a mock function with given fields: projectName
func (_m *ClientInterface) ListProjectBranches(projectName string) ([]gerrit.Branch, error) {
	ret := _m.Called(projectName)

	var r0 []gerrit.Branch
	if rf, ok := ret.Get(0).(func(string) []gerrit.Branch); ok {
		r0 = rf(projectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gerrit.Branch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(projectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: _type
func (_m *ClientInterface) ListProjects(_type string) ([]gerrit.Project, error) {
	ret := _m.Called(_type)

	var r0 []gerrit.Project
	if rf, ok := ret.Get(0).(func(string) []gerrit.Project); ok {
		r0 = rf(_type)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gerrit.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_type)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReloadPlugin provides a mock function with given fields: plugin
func (_m *ClientInterface) ReloadPlugin(plugin string) error {
	ret := _m.Called(plugin)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(plugin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetProjectParent provides a mock function with given fields: projectName, parentName
func (_m *ClientInterface) SetProjectParent(projectName string, parentName string) error {
	ret := _m.Called(projectName, parentName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(projectName, parentName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccessRights provides a mock function with given fields: projectName, permissions
func (_m *ClientInterface) UpdateAccessRights(projectName string, permissions []gerrit.AccessInfo) error {
	ret := _m.Called(projectName, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []gerrit.AccessInfo) error); ok {
		r0 = rf(projectName, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroup provides a mock function with given fields: groupID, description, visibleToAll
func (_m *ClientInterface) UpdateGroup(groupID string, description string, visibleToAll bool) error {
	ret := _m.Called(groupID, description, visibleToAll)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(groupID, description, visibleToAll)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProject provides a mock function with given fields: prj
func (_m *ClientInterface) UpdateProject(prj *gerrit.Project) error {
	ret := _m.Called(prj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gerrit.Project) error); ok {
		r0 = rf(prj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
